BEGIN
--------------------------------------------------------------------
Q1: Is there any compile error with the following code (if any)?

	unsigned int Arr[16];
	3[Arr] = 7; 
 
Explain:
The right way is
    Arr[3] = 7;



--------------------------------------------------------------------
Q2: What is the difference between the following 3 statements? 

const int * px; 
int const * px; 
int * const px; 

Is there any compile error for the following cases?
case1: 
int x = 13; 
const int * px; 
px = & x; 

case 2: 
int x = 13; 
int const * px; 
px = & x; 

case 3: 
int x = 13; 
int * const px; 
px = & x; 

Explain:

case1: 
int x = 13; 
const int * px; 
px = & x; 

//Px points to a constant integer.

case 2: 
int x = 13; 
int const * px; 
px = & x; 

//Px points to a constant integer.

case 3: 
int x = 13; 
int * const px; 
px = & x; 

Case 1 and 2, px points to a read only location. The integer location cannot be changed. Px is a pointer to a constant integer.
Case 3: Compile error size the pointer itself is read only. Px is a constant pointer to an integer.



--------------------------------------------------------------------
Q3: Write a function to set or clear ith bit of a 32-bit register. 
	Where ith (0-based) := {0, 1, 2, …, 31 } 
void reg_set(volatile unsigned int * pReg, int ith) 
{ 
unsigned int mask = 0x1 << ith;
*pReg |= mask;
} 

void reg_clear(volatile unsigned int * pReg, int ith) 
{ 
unsigned int mask = 0x1 << ith;
*pReg &= ~mask;
} 



--------------------------------------------------------------------
Q4: Write a swap function in C.
void swap(unsigned int * px, unsigned int *py) { 
unsigned int temp = *px;
*px = *py;
*py = temp;
} 

--------------------------------------------------------------------
Q5:	What is the output of the following code? (Given: sizeof(unsigned int) is 4) Page 34 

unsigned int Arr[16]; 
unsigned int a0 = (unsigned int) &Arr[0]; 
unsigned int a3 = (unsigned int) &Arr[3]; 
printf(“%d\n”, a3 – a0); 



Answer = 16






END
